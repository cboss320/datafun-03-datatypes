"""
Modify this docstring.

"""

# import some modules first - how many can you make use of?

import math


# define some functions


def get_area_of_lot(length, width):
    """
    Return area of a lot given the length and width of the lot.

    Could this fail?

    """

    # Use a try / except / finally block when something
    # could go wrong
    try:
        area = 0  # fix this
        return area
    except Exception as ex:
        print(f"Error: {ex}")
        return None


# define more functions here (see instuctions)


# -------------------------------------------------------------
# Call some functions and execute code!

# This is very standard Python - it means
# "If this module is the one being executed, i.e., the main module"
# (as opposed to being imported by another module)
# Literally: "if this module name == the name of the main module"
if __name__ == "__main__":

    # call your functions here (see instructions)
    print("your code here")


# Why? Why only print if this the module called?
# Because when you write good functions, you may want to
# import this module into another script - just like you did
# math or statistics.
# Build a library of resuable functions to support your domain.

# For example, if your domain:
# Is sports, create functions to provide a list of teams.
# Is pets, create functions to calculate adoption prices.
# Is music, create functions to return a list of your favorite artists.


# When you write reusable functions for your domain, you can
# import the module with your utility functions into other modules
# and use them there.  This is a very common practice.
# Anything you write can be imported into later projects.

###

import statistics
import math

# How long to cook pasta 
print('Courtney Pigford 1/21/23:')

print('How long cooking pasta')

scores = [
    8,
    9,
    10,
    11,
    12,
    3,
    4,
    5,
    13,
    14,
    15,
    12, 
    12, 
    12, 
    12, 

]

X = statistics.mean(scores)
y = statistics.mode(scores)
z = statistics.median(scores)
a = (statistics.stdev(scores))
b = (statistics.variance(scores))

print('the average cooking time is: ', X)
print('the most common time to cook pasta is: ', y)
print('the best cooking time for all pasta is: ', z)
print('the variance of cooking times is:  ', b)
print('Standard Deviation of the cooking times is: ', a)


xtimes_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
yvalues_list = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 35]

correlationxy = statistics.correlation(xtimes_list, yvalues_list)

print('Correlationxy is: ', correlationxy)

slope, intercept = statistics.linear_regression(xtimes_list, yvalues_list)
print('Slope: ',slope)
print('Interncept: ', intercept)

x_max = max(xtimes_list)
newx = x_max * 1.5  

print('newx: ', newx)

# Use the slope and intercept to predict a y value for the future x value
# y = mx + b

newy = slope * newx + intercept
print('newy: ', newy)

max = max(scores)
min = min(scores)
len = len(scores)
sum = sum(scores)

avg = sum / len

asc_scores = sorted(scores)

desc_scores = sorted(scores, reverse=True)

print('max: ',max)
print('min: ', min)
print('len: ',len) 
print('sum: ',sum) 
print('Average: ',avg)
print('asc scores: ', asc_scores)
print('desc scores: ', desc_scores)

scores.append(3)

yvalues_list.extend([9, 4, 5, 10])

scores.insert(12, 19, 18, 22)

yvalues_list.remove(9, 4, 5, 10)

scores.count(5)

numbers = [425, 375, 325]
sorted_numbers = sorted(numbers)
print('oven temperatures: ', sorted_numbers)

languages = [ 'Egg' , 'rice', 'Squash', 'Soba', 'Ramen']
print('When you dont like one pasta:')
print('you can try: ', languages.pop(-1))
print(languages, 'noodles')


print('if you dont like that one try:', languages.pop(-5))
print(languages, 'noodles')

=============================================================

 Welcome!

 It's 2023-02-01 at 08:50 PM

 This file is running on:    posix Darwin 19.6.0
 
 The Python version is:      3.11.1
 
 The Python interpreter is at:
 /usr/local/bin/python3.11

 The active environment should be either conda OR pip (one should be None):

     Active conda env is: base
     Active pip env is:   None
 
 The path to the active virtual environment is:

 /Library/Frameworks/Python.framework/Versions/3.11
 
 The Current Working Directory (CWD) where this command was launched is:

 /Users/resetandwiped/Desktop/44608-80:81/datafun-03-datatypes
 
 The absolute path to the data directory is:

 /Users/resetandwiped/Desktop/44608-80:81/datafun-03-datatypes/
 
 The absolute path to this source directory is:

 /Users/resetandwiped/Desktop/44608-80:81/datafun-03-datatypes
 
 The absolute path to this file is:

 /Users/resetandwiped/Desktop/44608-80:81/datafun-03-datatypes/about.py
 
==============================================================
==============================================================

Courtney Pigford 1/21/23:
How long cooking pasta
the average cooking time is:  10.133333333333333
the most common time to cook pasta is:  12
the best cooking time for all pasta is:  12
the variance of cooking times is:   13.266666666666667
Standard Deviation of the cooking times is:  3.6423435679060625
Correlationxy is:  0.7919966208216268
Slope:  1.7307692307692308
Interncept:  0.8333333333333339
newx:  18.0
newy:  31.98717948717949
max:  15
min:  3
len:  15
sum:  152
Average:  10.133333333333333
asc scores:  [3, 4, 5, 8, 9, 10, 11, 12, 12, 12, 12, 12, 13, 14, 15]
desc scores:  [15, 14, 13, 12, 12, 12, 12, 12, 11, 10, 9, 8, 5, 4, 3]
Traceback (most recent call last):
  File "/Users/resetandwiped/Desktop/44608-80:81/datafun-03-datatypes/user_numeric_lists.py", line 152, in <module>
    scores.insert(12, 19, 18, 22)
TypeError: insert expected 2 arguments, got 4
